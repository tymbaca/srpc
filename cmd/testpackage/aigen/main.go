// cmd/srpc-gen/main.go
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"go/types"
	"os"
	"path/filepath"

	"golang.org/x/tools/go/packages"
)

const version = "v0.0.1"

type methodMeta struct {
	Name     string
	ReqType  string
	RespType string
}

func main() {
	target := flag.String("target", "", "name of interface to generate for (required)")
	flag.Parse()

	if *target == "" {
		fmt.Fprintln(os.Stderr, "missing --target")
		os.Exit(2)
	}

	gofile := os.Getenv("GOFILE")
	outDir := "."
	if gofile != "" {
		outDir = filepath.Dir(gofile)
		if outDir == "" {
			outDir = "."
		}
	}

	cfg := &packages.Config{
		Mode: packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedImports,
		Dir:  outDir,
	}
	pkgs, err := packages.Load(cfg, ".")
	if err != nil {
		failf("loading package: %v", err)
	}
	if packages.PrintErrors(pkgs) > 0 {
		os.Exit(1)
	}
	if len(pkgs) == 0 {
		failf("no packages loaded")
	}
	pkg := pkgs[0]

	obj := pkg.Types.Scope().Lookup(*target)
	if obj == nil {
		failf("interface %q not found in package %s", *target, pkg.Types.Name())
	}
	typ := obj.Type().Underlying()
	iface, ok := typ.(*types.Interface)
	if !ok {
		failf("%q is not an interface", *target)
	}

	if iface.NumEmbeddeds() > 0 {
		failf("target interface %q has embedded interfaces; not supported", *target)
	}

	// Qualifier for type printing: if a type is from the same package, omit package prefix
	qualifier := func(other *types.Package) string {
		if other == nil {
			return ""
		}
		if other.Path() == pkg.Types.Path() {
			// same package, no qualifier
			return ""
		}
		return other.Name()
	}

	var methods []methodMeta
	for i := 0; i < iface.NumMethods(); i++ {
		m := iface.Method(i)
		sig, ok := m.Type().(*types.Signature)
		if !ok {
			failf("method %s has no signature", m.Name())
		}
		params := sig.Params()
		results := sig.Results()

		if params.Len() != 2 {
			failf("method %s: expected 2 parameters, got %d", m.Name(), params.Len())
		}
		first := params.At(0).Type().String()
		if first != "context.Context" {
			failf("method %s: first parameter must be context.Context, got %s", m.Name(), first)
		}
		reqType := types.TypeString(params.At(1).Type(), qualifier)

		if results.Len() != 2 {
			failf("method %s: expected 2 results, got %d", m.Name(), results.Len())
		}
		if results.At(1).Type().String() != "error" {
			failf("method %s: second result must be error, got %s", m.Name(), results.At(1).Type().String())
		}
		respType := types.TypeString(results.At(0).Type(), qualifier)

		methods = append(methods, methodMeta{
			Name:     m.Name(),
			ReqType:  reqType,
			RespType: respType,
		})
	}

	clientFile := filepath.Join(outDir, "client.srpc.go")
	serverFile := filepath.Join(outDir, "server.srpc.go")

	if !fileExists(clientFile) {
		src, err := generateClient(pkg.Name, *target, methods)
		if err != nil {
			failf("generate client: %v", err)
		}
		if err := writeFormattedFile(clientFile, src); err != nil {
			failf("writing client file: %v", err)
		}
		fmt.Printf("wrote %s\n", clientFile)
	} else {
		fmt.Printf("skipping %s (already exists)\n", clientFile)
	}

	if !fileExists(serverFile) {
		src, err := generateServer(pkg.Name, *target, methods)
		if err != nil {
			failf("generate server: %v", err)
		}
		if err := writeFormattedFile(serverFile, src); err != nil {
			failf("writing server file: %v", err)
		}
		fmt.Printf("wrote %s\n", serverFile)
	} else {
		fmt.Printf("skipping %s (already exists)\n", serverFile)
	}
}

func generateClient(pkgName, target string, methods []methodMeta) ([]byte, error) {
	var b bytes.Buffer

	fmt.Fprintf(&b, "// Code generated by srpc-gen %s. DO NOT EDIT.\n\n", version)
	fmt.Fprintf(&b, "package %s\n\n", pkgName)

	fmt.Fprintf(&b, "import (\n\t\"context\"\n\n\t\"github.com/tymbaca/srpc\"\n)\n\n")

	fmt.Fprintf(&b, "func New%sClient(client *srpc.Client) *%sClient {\n\treturn &%sClient{client: client}\n}\n\n", target, target, target)

	fmt.Fprintf(&b, "type %sClient struct {\n\tclient *srpc.Client\n}\n\n", target)

	for _, m := range methods {
		fmt.Fprintf(&b, "func (c *%sClient) %s(ctx context.Context, req %s) (resp %s, err error) {\n",
			target, m.Name, m.ReqType, m.RespType)
		fmt.Fprintf(&b, "\terr = c.client.Call(ctx, \"%s.%s\", req, &resp)\n", target, m.Name)
		fmt.Fprintf(&b, "\treturn resp, err\n}\n\n")
	}

	return b.Bytes(), nil
}

func generateServer(pkgName, target string, methods []methodMeta) ([]byte, error) {
	var b bytes.Buffer

	fmt.Fprintf(&b, "// Code generated by srpc-gen %s. DO NOT EDIT.\n\n", version)
	fmt.Fprintf(&b, "package %s\n\n", pkgName)

	fmt.Fprintf(&b, "import (\n\t\"context\"\n)\n\n")

	fmt.Fprintf(&b, "type %sServer struct {\n\t// TODO: fill\n}\n\n", target)

	for _, m := range methods {
		fmt.Fprintf(&b, "func (te *%sServer) %s(ctx context.Context, req %s) (%s, error) {\n",
			target, m.Name, m.ReqType, m.RespType)
		fmt.Fprintf(&b, "\tpanic(\"not implemented\") // TODO: Implement\n}\n\n")
	}

	return b.Bytes(), nil
}

func writeFormattedFile(path string, src []byte) error {
	fmtSrc, err := format.Source(src)
	if err != nil {
		return fmt.Errorf("format.Source failed: %w\nunformatted source:\n%s", err, string(src))
	}
	if err := os.WriteFile(path, fmtSrc, 0o644); err != nil {
		return err
	}
	return nil
}

func fileExists(path string) bool {
	_, err := os.Stat(path)
	return err == nil
}

func failf(formatStr string, args ...interface{}) {
	fmt.Fprintf(os.Stderr, formatStr+"\n", args...)
	os.Exit(1)
}
